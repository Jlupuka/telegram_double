import telebot
import mysql.connector
import json, time
from datetime import datetime
from config import TOKEN, PASSWORD_MYSQL
from telebot import types
from double_game import *

bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MySql
mydb = mysql.connector.connect(
    host="localhost",
    user="admin",
    password=PASSWORD_MYSQL,
    port="3306",
    database="telegram_users_data"
)

print(mydb)

cur = mydb.cursor(buffered=True)


# –ö—Å—Ç–∞—Ç–∏ buffered=True –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ —ç—Ç–æ–≥–æ, –∫–æ–≥–¥–∞ —è –ø—ã—Ç–∞–ª—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ BD,
# –±—ã–ª–∞ –æ—à–∏–±–∫–∞ ‚Äî mysql.connector.errors.InternalError: Unread result found
# –≤–æ—Ç –∫–∞–∫ –º–Ω–µ —ç—Ç–æ –æ–±—ä—è—Å–Ω–∏–ª–∏: buffered= True –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ cursor –¥–æ–ª–∂–µ–Ω —Å—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –æ–Ω —Å–≤–µ–∂–∏–π,
# –∏–Ω–∞—á–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ fetchone(), cursor –Ω–µ –±—É–¥–µ—Ç —Å—á–∏—Ç—ã–≤–∞—Ç—å –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞ –∏ —Å–Ω–æ–≤–∞


# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
# cur.execute("CREATE DATABASE telegram_users_data")

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users --------------- P.s. –≠—Ç–æ –±—ã–ª–∞ 1 –≤–∞—Ä–∏–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã, –ø–æ—Ç–æ–º —è –ø–æ–º–µ–Ω—è–ª.
# cur.execute('CREATE TABLE users (id INT AUTO_INCREMENT PRIMARY KEY, user_id INT UNIQUE, '
#             'first_name VARCHAR(255), last_name VARCHAR(255))')

# –î–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É users
# sql = 'INSERT INTO users (user_id, first_name, last_name) VALUES (%s, %s, %s)'
# val = (1, 'Dmitrii', 'Usachev')
# cur.execute(sql, val)
# mydb.commit()
#
# print(cur.rowcount, '–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞')

# –£–¥–∞–ª–∏–º –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞–±–ª–∏—Ü—ã, –¥–ª—è —Ç–µ—Å—Ç–∏–∫–æ–≤ :)
# cur.execute('DELETE FROM users')
# mydb.commit()


# –î—Ä–æ–ø–Ω–µ–º —Ç–∞–±–ª–∏—Ü—É, –∏–±–æ —è —Ä–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å email –∏ password'–æ–º.
# cur.execute('DROP TABLE users')
# mydb.commit()

# —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î
# cur.execute('CREATE TABLE users (id INT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT UNIQUE, '
#             'email VARCHAR(255) UNIQUE, password VARCHAR(255))')
# mydb.commit()

# –ö–æ—Ä–æ—á–µ, –º—ã –º–æ–∂–µ–º –ª–æ–≤–∏—Ç—å –±–æ–ª—å—à–∏–µ —é–∑–µ—Ä_–∞–π–¥–∏—à–Ω–∏–∫–∏(–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É int'–∞ –µ—Å—Ç—å –ø—Ä–µ–¥–µ–ª –∏ –ø–æ—ç—Ç–æ–º—É –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å
# –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è). –¢–∞–∫–∏–º–∏ –º–∞—Ö–∏–Ω–∞—Ü–∏—è–º–∏ –º—ã —É–≤–µ–ª–∏—á–∏–ª–∏ –ø—Ä–µ–¥–µ–ª. 2147483647 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è INT ‚Äî
# ‚Äî –æ—Ç—Å—é–¥–∞ –∏ –æ—à–∏–±–∫–∞
# cur.execute('''ALTER TABLE users MODIFY user_id BIGINT''')  # BIGINT —è –∏–∑–º–µ–Ω–∏–ª, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
# mydb.commit()

# user_data = dict()
# user_list = list()

# —á–∏—Ç–∞–µ–º –Ω–∞—à json'—á–∏–∫
def read_json_file():
    with open('user_box.json', encoding='utf-8') as r:
        data = json.load(r)
        print(data)
    return data


# –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã
class User:
    def __int__(self):
        self.user_id = ''
        self.email = ''
        self.password = ''
        self.user_money = None
        self.json_file = None


user_data = User()


# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@bot.message_handler(commands=['start', 'help'])
def start(message):
    keyboard = types.InlineKeyboardMarkup()

    key_registration = types.InlineKeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—èüì®', callback_data='registration')
    keyboard.add(key_registration)

    key_login = types.InlineKeyboardButton(text='–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Çüìß', callback_data='login')
    keyboard.add(key_login)

    send_text = '[+] –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–≥—Ä–æ-–±–æ—ÇüéÆ.\n' \
                '[+] –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç!'

    bot.send_message(message.chat.id, text=send_text, reply_markup=keyboard)


# –ø–æ–ª—É—á–∞–µ–º –ø–æ—á—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
def give_email(message):
    msg_text = message.text

    query = "SELECT email FROM users WHERE email = %s"
    cur.execute(query, (msg_text,))
    row = cur.fetchone()
    print(row)
    if row is None:
        try:
            if "@" in msg_text and "[]!#$%^&*()_+=-?:;‚Ññ<>,/`~\ " not in msg_text:
                user_data.email = msg_text
                msg = bot.send_message(message.chat.id, '[+] –¢–µ–ø–µ—Ä—å - –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å.')
                bot.register_next_step_handler(msg, password_by_email)
            else:
                msg = bot.send_message(message.chat.id, '[+] –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –ø–æ—á—Ç—É.\n'
                                                        '\n'
                                                        '[+] –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
                bot.register_next_step_handler(msg, start)
        #         –î–∞ –∑–Ω–∞—é —á—Ç–æ except Exception, —ç—Ç–æ —É–∂–∞—Å–Ω–æ, –Ω–æ –ø–æ–Ω—è–ª —è —ç—Ç–æ —É–∂–µ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ–≥–¥–∞ –ª–æ–≤–∏–ª –∫—É—á—É,
        #         –Ω–µ –ø–æ–Ω—è—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
        except Exception as e:
            bot.reply_to(message, '–æ—à–∏–±–æ—á–∫–∞')
    else:
        msg = bot.reply_to(message, '[!] –î–∞–Ω–Ω—ã–π email, —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n'
                                    '\n'
                                    '[!] –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        bot.register_next_step_handler(msg, give_email)


# –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ
def password_by_email(message):
    user_id = message.from_user.id  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    password = message.text
    user_data.password, user_data.user_id = password, user_id
    add_data_users_in_db(message)


# –ö–æ–Ω–µ—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∑–∞–ø–∏—Å—å—é –≤ json –µ–≥–æ –ø–æ—á—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –µ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
def add_data_users_in_db(message):
    sql = 'INSERT INTO users (user_id, email, password) VALUES (%s, %s, %s)'
    val = (user_data.user_id, user_data.email, user_data.password)
    cur.execute(sql, val)
    mydb.commit()

    time_create = str(datetime.now())

    user_data.user_money = 1000
    create_json_data = {
        'users': {user_data.email: {'information': {'money': user_data.user_money, 'time_create': time_create}}}}
    add_json_data = {user_data.email: {'information': {'money': user_data.user_money, 'time_create': time_create}}}
    try:
        with open('user_box.json', encoding='utf-8') as r:
            data = json.load(r)
            print(data)
            data['users'].update(add_json_data)
            with open('user_box.json', 'w', encoding='utf-8') as outfile:
                json.dump(data, outfile, indent=2, ensure_ascii=False)

        r.close(), outfile.close()
    except UnboundLocalError:
        with open('user_box.json', 'w', encoding='utf-8') as outfile:
            json.dump(create_json_data, outfile, indent=2, ensure_ascii=False)
            outfile.close()

    print(f'–∏—Ç–æ–≥–æ–≤—ã–π json:\n{data}')

    cur.execute("SELECT MAX(id) FROM users")
    max_id = cur.fetchone()

    print(max_id[0], '–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!')
    bot.send_message(message.chat.id, '[!] –í—ã, —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!‚úÖ')


# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_user(message):
    try:
        msg_text = message.text
        msg_text = msg_text.split(' ')
        query = "SELECT email, password FROM users WHERE email = %s"
        cur.execute(query, (msg_text[0],))
        row = cur.fetchone()
        if row is not None:
            if row[1] == msg_text[1]:
                keyboard = types.InlineKeyboardMarkup()

                key_profile = types.InlineKeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—åüíº', callback_data='profile')
                keyboard.add(key_profile)

                key_game_double = types.InlineKeyboardButton(text='Doubleüé≤', callback_data='double_game')
                keyboard.add(key_game_double)

                user_data.email = msg_text[0]

                bot.send_message(message.chat.id, '[+] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.', reply_markup=keyboard)

            else:
                bot.reply_to(message, '[!] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –ø–æ—á—Ç—É/–ø–∞—Ä–æ–ª—å!')
        elif row is None:
            bot.reply_to(message, '[!] –î–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.')

    except IndexError:
        bot.reply_to(message, '[!] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –ø–æ—á—Ç—É/–ø–∞—Ä–æ–ª—å')


# —Ä–µ–∞–ª–∏–∑—É–µ–º –∏–≥—Ä—É - double üé≤
def double_game(message):
    keyboard = types.InlineKeyboardMarkup()

    key_game_double = types.InlineKeyboardButton(text='Doubleüé≤', callback_data='double_game')
    keyboard.add(key_game_double)

    try:
        random_number = return_number()
        print(random_number)
        with open('user_box.json', encoding='utf-8') as r:
            data = json.load(r)
            info_money = data['users'][user_data.email]["information"]["money"]
        msg_by_user = list(map(int, message.text.split(' ')))
        if msg_by_user[0] > info_money:
            big_money_msg = bot.send_message(message.chat.id, '[!] –í—ã –≤–≤–µ–ª–∏ —Å—É–º–º—É –±–æ–ª—å—à–µ, —á–µ–º –≤–∞—à –±–∞–ª–∞–Ω—Å!')
            bot.register_next_step_handler(big_money_msg, double_game)
        elif msg_by_user[0] == random_number:
            # with open('user_box.json', encoding='utf-8') as r:
            #     data = json.load(r)
            new_money = data['users'][user_data.email]["information"]["money"] + msg_by_user[0] * msg_by_user[1]
            print(data)
            data['users'][user_data.email]["information"]["money"] = new_money
            with open('user_box.json', 'w', encoding='utf-8') as outfile:
                json.dump(data, outfile, indent=2, ensure_ascii=False)

            bot.send_message(message.chat.id, '[+] –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –∑–∞—à–ª–∞!')

            photo = open(f'photo_for_double/{random_number}.jpg', 'rb')
            bot.send_photo(message.chat.id, photo)
        else:
            with open('user_box.json', encoding='utf-8') as r:
                data = json.load(r)
                new_money = data['users'][user_data.email]["information"]["money"] - msg_by_user[1]
                print(data)
                data['users'][user_data.email]["information"]["money"] = new_money
                with open('user_box.json', 'w', encoding='utf-8') as outfile:
                    json.dump(data, outfile, indent=2, ensure_ascii=False)

            bot.send_message(message.chat.id, '[+] –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ –∑–∞—à–ª–∞!')
            bot.send_message(message.chat.id, f'[+] –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_number}')

            photo = open(f'photo_for_double/{random_number}.jpg', 'rb')
            bot.send_photo(message.chat.id, photo)
    except ValueError:
        msg = bot.send_message(message.chat.id, '[!] –í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è!')
        bot.register_next_step_handler(msg, double_game)
    finally:
        money = data['users'][user_data.email]["information"]["money"]
        if money <= 0:
            data['users'][user_data.email]["information"]["money"] = 100
            money = data['users'][user_data.email]["information"]["money"]
            with open('user_box.json', 'w', encoding='utf-8') as outfile:
                json.dump(data, outfile, indent=2, ensure_ascii=False)
            bot.send_message(message.chat.id, f'[!] –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª 0 –∏–ª–∏ –Ω–∏–∂–µ 0, –Ω–æ –≤–∞–º –Ω–∞–∫–∏–Ω—É–ª–∏ —Å–æ—Ç–æ—á–∫—Éüòâ: {money}',
                             reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, f'[!] –í–∞—à –±–∞–ª–∞–Ω—Å: {money}', reply_markup=keyboard)
        outfile.close(), r.close()


# –ö–Ω–æ–ø–∫–∞ —Å—Ç–æ–ø(–ù–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –æ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –º–Ω–µ —Ö–æ—á–µ—Ç—Å—è P.s. –ò –¥–∞ —è —ç—Ç–æ –Ω–µ –∏—Å–ø—Ä–∞–≤–∏–ª...)
@bot.message_handler(commands=['stop'])
def stop_work_command(message):
    bot.send_message(message.chat.id, '[-] –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º–æ—é —Ä–∞–±–æ—Ç—É.‚õî\n'
                                      '[+] –ß—Ç–æ-–±—ã –∑–∞–Ω–æ–≤–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start')


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == 'registration':
        msg = bot.send_message(call.message.chat.id, '[+] –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                                                     '\n'
                                                     '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à email.')
        bot.register_next_step_handler(msg, give_email)

    elif call.data == 'login':
        msg = bot.send_message(call.message.chat.id, '[!] –í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.\n'
                                                     '\n'
                                                     '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à email –∏ –ø–∞—Ä–æ–ª—å.\n'
                                                     '‚¨á–ü—Ä–∏–º–µ—Ä‚¨á\n'
                                                     'olya@mail.ru 123456789')
        bot.register_next_step_handler(msg, check_user)

    elif call.data == 'profile':
        user_data.json_file = read_json_file()
        info = f'[+] Moneyüí∏: {user_data.json_file["users"][user_data.email]["information"]["money"]}\n' \
               f'[+] –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—èüïî: {user_data.json_file["users"][user_data.email]["information"]["time_create"]}'
        print(info)

        bot.send_message(call.message.chat.id,
                         f'[+] –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n{info}')
    elif call.data == 'double_game':
        user_data.json_file = read_json_file()
        info_money = f'[+] –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data.json_file["users"][user_data.email]["information"]["money"]}'
        msg = bot.send_message(call.message.chat.id, f'{info_money}\n'
                                                     f'[!] –ß—Ç–æ-–±—ã –∏–≥—Ä–∞—Ç—å –≤–≤–µ–¥–∏—Ç–µ —Ö –∫–æ—Ç–æ—Ä—ã–π –¥—É–º–∞–µ—Ç–µ(2, 3, 5, 50) '
                                                     f'–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n'
                                                     f'–ü—Ä–∏–º–µ—Ä:\n'
                                                     f'2 500\n'
                                                     f'[!] –í —Å–ª—É—á–∞–µ –≤—ã–∏–≥—Ä—ã—à–∞, —Ç–∞ —Å—Ç–∞–≤–∫—É –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ '
                                                     f'—É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ x –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É. –£–¥–∞—á–∏!')
        bot.register_next_step_handler(msg, double_game)


bot.enable_save_next_step_handlers(delay=2)

bot.load_next_step_handlers()

if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            time.sleep(3)
            print(e)
